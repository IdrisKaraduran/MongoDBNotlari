use ("products");
db.electronics.find();

38//price i 230 a esit olan ilk dokumani 
//dokumani bulup price ini 250 olarak guncelle
//guncellenmis dokumani goruntule
use ("products");
db.electronics.
findOneAndUpdate({"price":230},
{$set:{"price":250}},
{returnNewDocument:true});
//Guncellenmis dokumani almak icin returnNewDocument:true
//olmali
39//price 930 olan dokumani bulup name bilgisini GOLD
//price i ise 250 olarak guncelle
//yoksa ise ekleyelim.
use ("products");
db.electronics.
findOneAndUpdate({"price":930},
{$set:{"name":"GOLD","price":250}},
{upsert:true,returnNewDocument:true});
//Eger dokuman yoksa ekle ve update et demek icin
// upsert:true kullaniyoruz.

40//birden fazla dökümanı güncellemek isteersek
//Fiyatı 300 den düşük olan bütün dökümanların
// ismini "Woww" yapalım.
use ("products");
db.electronics.updateMany({"price":{$lt:300}},
{$set:{"name":"Woww"}})

use("products");
db.electronics.update({"price":{$lt:300}},
{$set:{"name":"Wow"}},
{multi:true});
//DeprecationWarning: Collection.update() 
//is deprecated. Use updateOne, updateMany, or bulkWrite.
//bu method deprecate edildi.

41-//Fiyatı 300 den düşük olan bütün dökümanların
// price ini 2 ile carpalim
use ("products");
db.electronics.updateMany({"price":{$lt:300}},
              {$mul:{"price":2}});


41//Bir dokumani silmek istersek
//name i en ucuz olan ilk dokumani silelim
use ("products");
db.electronics.deleteOne({"name":"en ucuz"});

use ("products");
db.electronics.find();

42//Birden fazla dokumani silmek istersek
//name i "xyz" olan tum dokumanlari silelim
use ("products");
db.electronics.deleteMany({"name":"xyz"});

43//Tum dokumanlari silelim
use ("products");
db.electronics.deleteMany({});

//2.yol
use ("products");
db.electronics.delete();//deprecate edildi

//3.yol
db.electronics.remove({});//deprecate edildi


44-//Yeni bir dokuman ekleyelim.
use ("products");
db.electronics.insertOne({"name":"Laptop",
                          "brand":{"name":"Lenova",
                          "model":243},
                          "city":["Istanbul","Ankara"],
                          "active":true});

use ("products");
db.electronics.find();

use ("products");
db.electronics.find({"brand.model":243});
use ("products");
db.electronics.find({"city":"Ankara"});

------------------------------------------
//=================================================
//                   AGGREGATION
//=================================================
// 1) Aggregation, dokumanlardaki verilerin islenmesi 
//ve hesaplanan sonuclarin donmesini saglayan islemlerdir. 
//
// 2) Aggregation islemleri, farklı dokumanlardaki
// degerleri gruplandirabilir.
// 3) Bu gruplanan veriler uzerinde cesitli islemlerin
// gereceklestirelerek tek 
//    bir sonuc degerinin donmesi saglanabilir.
//
// 4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
//     A) aggregation pipeline (toplama boru hattı) --> best practice...
//     B) map-reduce function (map indirgeme)
//     C) single-purpose aggregation (tek-amaç toplama) 
//
// 5) Aggregiation, SQL'deki Join islemlerine benzetilebilir. 
//=================================================
//             AGGREGATION PIPELINE
//=================================================
// SYNTAX
// 
//   pipeline = [
//   { $match : { … }},
//   { $group : { … }},
//   { $sort : { … }},
//      ...
//   ]
//   db.collectionName.aggregate({pipeline}, {options})
//
//  $match() –> Verileri secerken filtrelemek icin
//  $group({_id : "$field"}) - >islenen verilerin gruplanmasi icin 
//  $sort() -> Sonuclarin siralanmasi icin


use('okul');
db.grades.insertMany([
{"_id":6305, "name": "A. MacDyver", "assignment":5, "points" :24},
{"_id":6308, "name": "B. Batlock", "assignment":3, "points" :22},
{"_id":6312, "name": "M. Tagnum", "assignment":5, "points" :30},
{"_id":6319, "name": "R. Stiles", "assignment":2, "points" :12},
{"_id":6322, "name": "A. MacDyver", "assignment":2, "points" :14},
{"_id":6334, "name": "R. Stiles", "assignment":1, "points" :10},
{"_id":6345, "name": "A. Stiles", "assignment":1, "points" :10}
]);

use('okul');
db.grades.find();


1-//Her bir assigment icin toplam puanlari listeleyelim
use('okul');
var pipeline = [
    {$match:{}},//filtreleme yapmamiza gerek yok.
    {$group:{"_id":"$assignment", total_points:{$sum:"$points"}}}
    //Bir field in degerini ifade etmek icin basina $ isareti koy  
];
db.grades.aggregate(pipeline);

use('okul');
db.grades.aggregate([
    {$match:{}},//filtreleme yapmamiza gerek yok.
    {$group:{"_id":"$assignment", total_points:{$sum:"$points"}}}
    //Bir field in degerini ifade etmek icin basina $ isareti koy  
]);
//Dogrudan parametre olarak da verebiliriz.

2-//Her bir assignment in ortalama puanlarini hesapla
//Artan sirada sirala

use('okul');
var pipeline = [
  {$match:{}},
  {$group:{"_id":"$assignment", ort_puan:{$avg:"$points"}}},
  {$sort:{ort_puan:1}}
]
db.grades.aggregate(pipeline)

3-//Her bir assignment in minumum puanini bul ve azalaan sekilde sirala
use("okul");
var pipeline = [
  {$match:{}},
  {$group:{"_id":"$assignment", min_puan:{$min:"$points"}}},
  {$sort:{min_puan:-1}}
]
db.grades.aggregate(pipeline);

4-//Assignment degeri 4 den az olan her bir assignment larin 
//max puanlarini bul.Azalan sirada sirala
use("okul");
var pipeline = [
  {$match:{"assignment":{$lt:4}}},
  {$group:{"_id":"$assignment", max_puan:{$max:"$points"}}},
  {$sort:{max_puan:-1}}
];
db.grades.aggregate(pipeline);

5-//Ismi A ile baslayan dokumanlarin toplam points sayisi bulunuz

use("okul");
var pipeline = [
  {$match:{"name":{$regex:"^A"}}},
  {$group:{"_id":"", sum_points:{$sum:"$points"}}}
];
db.grades.aggregate(pipeline)

var pipeline = [
  {$match:{"name":{$regex:"^A"}}},
  {$group:{"_id":null, sum_points:{$sum:"$points"}}}
];//Buraya null da koyabiliriz ikisi de aynidir.

6-//Ismi S ile biten dokumanlarin toplam puanlarini bulun

use("okul");
var pipeline = [
  {$match:{"name":{$regex:"s$"}}},
  {$group:{"_id":null, max_points:{$sum:"$points"}}}
];
db.grades.aggregate(pipeline)

7-//points degeri 19 dan dusuk olan dokumanlarin sayisini bulunuz?

//1.yol
use("okul");
db.grades.find({"points":{$lt:19}}).count();

//2.yol
use("okul");
db.grades.count({"points":{$lt:19}});


//3.Yol
use("okul");
var pipeline = [
  {$match:{"points":{$lt:19}}},
  {$count:"dusuk puanlar"}
]
db.grades.aggregate(pipeline)

use("okul")
db.exams.insertMany(
[{"student":"dave", "midterm":80,  "final":100},
{"student":"dave",  "midterm":85,  "final":52},
{"student":"fred",  "midterm":60,  "final":100},
{"student":"wilma", "midterm":55,  "final":50},
{"student":"barnie","midterm":60,  "final":75},
{"student":"wilma", "midterm":94,  "final":99},
{"student":"betty", "midterm":95,  "final":91}]);

use("okul")
db.accounting.insertMany(
[{"name":"dave", "expense":[-80, -40, -50, -120], "earn":[100, 150]},
{"name":"dave",  "expense":[-60, -30, -20],       "earn":[200, 50, 130]},
{"name":"fred",  "expense":[-80, -40, -50],       "earn":[300, 450]},
{"name":"wilma", "expense":[-80, -120],           "earn":[500, 50, 70, 10]},
{"name":"barnie","expense":[-140, -50, -120],     "earn":[400]},
{"name":"wilma", "expense":[-120],                "earn":[22, 375, 65]},
{"name":"betty", "expense":[-180, -40, -70, -12], "earn":[500, 650, 400]}]);

//gecici olarak yeni bir field eklemek istersek 
//8)exams içindeki midterm ve final değerlerinin toplamını
// gösteren bir field ekleyiniz.
use("okul");
db.exams.aggregate({$addFields:
{result:{$sum:["$midterm","$final"]},success:true}})

//Add ve sum her ikisi de calisiyor.
use("okul");
db.exams.aggregate({$addFields:
{result:{$add:["$midterm","$final"]},success:true}})


//9a) accounting içindeki her bir dokuman icin toplam expense,
// toplam earn değerlerini bulunuz?
use("okul");
db.accounting.aggregate({$addFields:{total_expense:{$sum:"$expense"},
                                     total_earn:{$sum:"$earn"}}})

//9b) accounting içindeki toplam expense,
// toplam earn ve net balance değerlerini bulunuz
use("okul");
db.accounting.aggregate([{$addFields:{total_expense:{$sum:"$expense"},
                                     total_earn:{$sum:"$earn"}}},
                        {$addFields:{net_balance:{$add:["$total_expense","$total_earn"]}}}])

use("okul");
db.accounting.find();

//9c) yukarıdaki sorguda netBalance degerini büyükten küçüğe sıralıyalım
use("okul")
db.accounting.aggregate([{$addFields:{total_expense:{$sum:"$expense"},
                                    total_earn:{$sum:"$earn"}}},
                  {$addFields:{net_balance:{$add:["$total_expense","$total_earn"]}}},
                  {$sort:{"net_balance":-1}}])

//9d) yukarıdakine ek olarak bazı fieldları görmek istemiyorsam ? 
use("okul")
db.accounting.aggregate([{$addFields:{total_expense:{$sum:"$expense"},
                                    total_earn:{$sum:"$earn"}}},
                  {$addFields:{net_balance:{$add:["$total_expense","$total_earn"]}}},
                  {$sort:{"net_balance":-1}},
                  {$project:{"_id":0,"name":1,"total_expense":1,"total_earn":1,"net_balance":1}}])

//9d) yukarıdakine ek olarak bazı fieldları görmek istemiyorsam ? 
use("okul");
var pipeline=[{$addFields:{total_expense:{$sum:"$expense"} ,
                           total_earn:{$sum:"$earn"}}},
              {$addFields:{net_balance:{$add:["$total_expense","$total_earn"]}}},
              {$sort:{"net_balance":-1}},
              {$project:{"_id":0,expense:0,earn:0}}];
db.accounting.aggregate(pipeline);

//=======================================
//bulkWrite
//=======================================


use("okul")
db.stories.insertMany(
[{"author":"dave", "score":75, "views": 200},
{"author":"chris", "score":90, "views": 100},
{"author":"dave", "score":35, "views": 3000},
{"author":"mary", "score":80, "views": 350},
{"author":"dave", "score":54, "views": 333},
{"author":"mary", "score":97, "views": 2000}]);

// Task : Aşağıdaki birden fazla komudu tek methodla nasıl yapabiliriz
//    * Insert {"author":"mark","score":55, "views":555} ,
//    *Yazari Dave olan  ilk Dave'in score bilgisini 55 olarak güncelleyin ,
//    * Yazarı :"chris" olan ilk dökümanı 
//       {"author":"chris tien","score":55} ile değiştirin ,
//    * Yazarı "mary" olan ilk dökümanı silin .
use("okul")
db.stories.bulkWrite([
{insertOne:{"document":{"author":"mark","score":55, "views":555}}},
{updateOne:{"filter":{"autor":"dave"},"update":{$set:{"score":55}}}},
{replaceOne:{"filter":{"author":"chris"},"replacement":{"author":"chris tien","score":55}}},
{deleteOne:{"filter":{"author":"mary"}}}
]);


//==========================================================
//                    UNIONWITH (Full Join)
//==========================================================
//
//2 farklı collectiondan datayı nasıl çekebiliriz?
//SQL de bunu joinler ile yapıyorduk
//===========================================================

use("MEDYA")
db.romanlar.insertMany(
[{"yazar": "Mehmet Bak",  "fiyat" : 60, "yayinEvi" : "Yildiz",   "adet": 1000 },
{"yazar" : "Ali Gel",     "fiyat" : 75, "yayinEvi" : "MaviAy",   "adet": 1200 },
{"yazar" : "Su Ak",       "fiyat" : 90, "yayinEvi" : "Caliskan", "adet": 2200},
{"yazar" : "Meryem Can",  "fiyat" : 35, "yayinEvi" : "MorEv",    "adet": 560},
{"yazar" : "Pelin Su",    "fiyat" : 80, "yayinEvi" : "Hedef",    "adet": 890 },
{"yazar" : "Suat Ok",     "fiyat" : 54, "yayinEvi" : "Sinir",    "adet": 245}]);


use("MEDYA")
db.denemeler.insertMany(
[{"yazar": "Mehmet Bak",  "fiyat" : 34, "yayinEvi" : "Yildiz", "adet": 400 },
{"yazar" : "Deniz Kos",   "fiyat" : 44, "yayinEvi" : "Yildiz", "adet": 350 },
{"yazar" : "Su Ak",       "fiyat" : 50, "yayinEvi" : "MorEv", "adet": 200},
{"yazar" : "İsmet Kaç",   "fiyat" : 25, "yayinEvi" : "Hedef","adet": 800},
{"yazar" : "Ali Gel",     "fiyat" : 40, "yayinEvi" : "Hedef", "adet": 1200 },
{"yazar" : "Meryem Can",  "fiyat" : 22, "yayinEvi" : "MaviAy","adet": 300}]);

//1 ) Her 2 collectiondan tüm dökümanları "adet" sutununa (field) göre ters 
// sıralıyarak listeyeliniz, 

use("MEDYA");
var pipeline = [
  {$unionWith:{coll:"denemeler"}},//collection lari birlestir
  {$sort:{"adet":-1}},//adet field larina gore sirala
];
db.romanlar.aggregate(pipeline);

use("MEDYA");
db.romanlar.aggregate([
  {$unionWith:{coll:"denemeler"}},//collection lari birlestir
  {$sort:{"adet":-1}},//adet field larina gore sirala
])

use("MEDYA");
db.denemeler.aggregate([
  {$unionWith:{coll:"romanlar"}},//collection lari birlestir
  {$sort:{"adet":-1}},//adet field larina gore sirala
])

use("MEDYA");
db.denemeler.aggregate([
  {$unionWith:{coll:"romanlar"}},//collection lari birlestir
  {$sort:{"adet":-1}},
  {$project:{"_id":0}}//adet field larina gore sirala
])

//2 ) Her bir yayınevinin toplam kitap sayılarını ( 2 collection için) hesaplayan
// ve sıralayan query yazınız

use("MEDYA");
var pipeline = [
{$unionWith:{coll:"romanlar"}},
{$group:{"_id":"$yayinEvi", toplam_kitap:{$sum:"$adet"}}},//gruplama
{$sort:{"toplam_kitap":1}}//siralama
];
db.denemeler.aggregate(pipeline);

//3 ) Her bir yayınevinin kitap (deneme veya roman) 
//satıslarından elde edeceği
// toplam geliri hesaplayan query yazınız

use("MEDYA");
var pipeline = [
  {$unionWith:{coll:"denemeler"}},
  {$group:{"_id":"$yayinEvi", toplam_para:{$sum:{$multiply:["$adet","$fiyat"]}}}},
];
db.romanlar.aggregate(pipeline)


//==================================================================================
//                       $LOOKUP (LEFT JOIN) 
//    1. collectionın hepsi, 2. collectiondan ortak olanlar görüntülenir. 
//    {
//      $lookup:
//      {
//        from: <Join uygulanacak İlişki kurulacak coll.>,
//        localField: <giris dokumanindaki ilgili yani ilişki kuracak alanı>,
//        foreignField: <Join yapilacak collectiondaki ilişki kurulacak alanı>,
//        as: <İlişkilendirme sonucu eşleşen verilerin atanacağı yeni dizi alanı>
//      },
//      { $unwind:<field path> }//önceki stagedeki fieldı sonraki stage'e aktarır.
//    }
//==================================================================================

use("MEDYA")
db.siirler.insertMany(
[{"muellif": "Mehmet Bak",   "fiyat" : 34, "yayinEvi" : "Yildiz", "adet": 400 },
{"muellif" : "Ali Gel",      "fiyat" : 40, "yayinEvi" : "Hedef",  "adet": 1200 },
{"muellif" : "Su Ak",        "fiyat" : 50, "yayinEvi" : "MorEv",  "adet": 200},
{"muellif" : "Meryem Can",   "fiyat" : 22, "yayinEvi" : "MaviAy", "adet": 300},
{"muellif" : "Deniz Kos",    "fiyat" : 44, "yayinEvi" : "Yildiz", "adet": 350 },
{"muellif" : "İsmet Kaç",    "fiyat" : 25, "yayinEvi" : "Hedef",  "adet": 800}]);


use("MEDYA")
db.romanlar.insertMany(
[{"yazar": "Mehmet Bak",  "fiyat" : 60, "yayinEvi" : "Yildiz",   "adet": 1000 },
{"yazar" : "Ali Gel",     "fiyat" : 75, "yayinEvi" : "MaviAy",   "adet": 1200 },
{"yazar" : "Su Ak",       "fiyat" : 90, "yayinEvi" : "Caliskan", "adet": 2200},
{"yazar" : "Meryem Can",  "fiyat" : 35, "yayinEvi" : "MorEv",    "adet": 560},
{"yazar" : "Pelin Su",    "fiyat" : 80, "yayinEvi" : "Hedef",    "adet": 890 },
{"yazar" : "Suat Ok",     "fiyat" : 54, "yayinEvi" : "Sinir",    "adet": 245}]);


//===============================lookup================================
use("MEDYA");
db.romanlar.aggregate({
                      $lookup: {
                      from:"siirler",
                      localField:"yazar",
                      foreignField:"muellif",
                      as: "ortak yazarlar"
}});

// QUERY: Her 2 collectionda (romanlar, şiirler) 
//ortak olan yazarların toplam
// kitap sayılarını ve kitap fiyatlarının toplamını hesaplayan query yazınız
use("MEDYA");
var pipeline = [
  {
$lookup: {
  from:"siirler",
  localField:"yazar",
  foreignField:"muellif",
  as: "ortak_yazarlar"//siirlerden gelen dokuman buraya aliniyor.
}},
{$unwind:{path:"$ortak_yazarlar"}},
{$addFields:{toplam_kitap:{$sum:["$adet","$ortak_yazarlar.adet"]},
              toplam_fiyat:{$sum:["$fiyat","$ortak_yazarlar.fiyat"]}}},
{$project:{"_id":0,"toplam_kitap":1,"toplam_fiyat":1,"yazar":1}}
];
db.romanlar.aggregate(pipeline)

use("MEDYA")
var pipeline=[{ $lookup: {
                from:"siirler" ,
                localField: "yazar",
                foreignField:"muellif",
                as:"ortak_yazarlar"}},//siirlerden gelen döküman buraya alınıyor.
              {$unwind:{path:"$ortak_yazarlar"}},
              {$addFields:{toplam_kitap:{$sum:["$adet","$ortak_yazarlar.adet"]},
                           toplam_fiyat:{$sum:["$fiyat","$ortak_yazarlar.fiyat"]}}},
              {$project:{"_id":0,"toplam_kitap":1,"toplam_fiyat":1,"yazar":1}}               
              
];
db.romanlar.aggregate(pipeline);































































































